#TopCoder ContestApplet Preferences File
#Tue Jan 11 14:41:21 EST 2005
editor.1.classpath=/home/jdutta/programming/topcoder/plugins/CodeProcessor.jar\:/home/jdutta/programming/topcoder/plugins/FileEdit.jar\:/home/jdutta/programming/topcoder/plugins/TZTester.jar
fileeditor.config.signaturefilename=
com.topcoder.client.contestApplet.common.LocalPreferences.commonclasspath=
fileeditor.config.overrideFileName=false
codeprocessor.config.pluginentrypoint=fileedit.EntryPoint
fileeditor.config.lineComments=true
editor.1.name=TZTester
editor.1.eager=0
fileeditor.config.csharptemplate=using System;\r\nusing System.Collections;\r\npublic class $CLASSNAME$ {\r\n\tpublic $RC$ $METHODNAME$($METHODPARMS$) {\r\n\t\t$CARETPOSITION$\r\n\t}\r\n}
fileeditor.config.provideBreaks=false
fileeditor.config.backup=true
com.topcoder.jmaContestApplet.frames.codingframe.location=110\:84
fileeditor.config.htmldesc=false
editor.numplugins=1
editor.defaultname=
codeprocessor.config.codeprocessor=tangentz.TZTester
fileeditor.config.breakAt=60
fileeditor.config.cppextension=cpp
fileeditor.config.cpptemplate=//////////////////////////////////////////////////////////////\n//\t\tTemplate for TopCoder\n//////////////////////////////////////////////////////////////\n\n\#ifdef __GNUC__   \n\#define int64 long long   \n\#else /* MSVC, say */   \n\#pragma warning( disable \: 4786 )   \n\#endif\n\n\#include <iostream>\n\#include <sstream>\n\#include <vector>\n\#include <string>\n\#include <algorithm>\n\#include <numeric>\n\#include <functional>\n\#include <map>\n\#include <set>\n\#include <list>\n\#include <deque>\n\nusing namespace std;\n\n\#define MAX(a,b) ((a) > (b))? (a)\: (b)\n\#define FOR(i, begin, end) for(int i\=begin; i<end; i++) \n\#define FOR_ITER(i, v) for(typeof((v).begin()) i\=(v).begin(); i\!\=(v).end(); i++)\n\#define B2E(v) (v).begin(), (v).end()\n\ntypedef vector<string> VS;\ntypedef vector<int> VI;\ntypedef vector< vector<int> > VVI;\n\n// print a vector\ntemplate <class T>\nostream& operator<<(ostream &os, vector<T> arr)\n{\n    os << "["; \n    for(int i\=0; i<arr.size(); i++) { \n        os << (i?", "\:"") << arr[i]; \n    }\n    os << "]";\n    return os;\n}\n\n// tokenize a string to tokens delimited by delim\nVS tokenize(string str, string delim) \n{\n    VS ret;\n    char *tok \= strtok(strdup(str.c_str()), delim.c_str());\n    while(tok \!\= NULL) {\n        ret.push_back(tok);\n\ttok \= strtok(NULL, delim.c_str());\n    }\n    return ret;\n}\n\n// tokenize a string to int tokens\nVI tokenize_int(string str, string delim)\n{\n    VI ret;\n    VS tokenized_arr \= tokenize(str, delim);\n    for (int i\=0; i<tokenized_arr.size(); i++) {\n        ret.push_back(atoi(tokenized_arr[i].c_str()));\n    }\n    return ret;\n}\n\n// tokenize a vector of strings to an int matrix\nVVI tokenize_intarr(VS strvec, string delim)\n{\n    VVI ret;\n    for (int i\=0; i<strvec.size(); i++) {\n        ret.push_back(tokenize_int(strvec[i], delim));\n    }\n    return ret;\n}\n\n// tokenize a string to tokens (delimiter\: whitespace)\nVS tokenize(string str) \n{\n    VS ret;\n    stringstream ss;\n    string tok;\n    ss << str;\n    while(ss >> tok) ret.push_back(tok);\n    return ret;\n}\n\n// tokenize a string to int tokens (delimiter\: whitespace) \nVI tokenize_int(string str)\n{\n    VI ret;\n    stringstream ss;\n    int tok;\n    ss << str;\n    while(ss >> tok) ret.push_back(tok);\n    return ret;\n}\n\n// tokenize a vector of strings to an int matrix (delimiter\: whitespace) \nVVI tokenize_intarr(VS strvec)\n{\n    VVI ret;\n    for (int i\=0; i<strvec.size(); i++) {\n        ret.push_back(tokenize_int(strvec[i]));\n    }\n    return ret;\n}\n\n// gcd function\nint gcd(int a, int b) { return (a\=\=0)? b\: gcd(b%a, a); }\n\n///////////////////////////////////////////////////////////////\n\nclass $CLASSNAME$\n{ \npublic\: \n    $RC$ $METHODNAME$($METHODPARMS$);\n    $TESTCODE$ \n}; \n\n$RC$ $CLASSNAME$\:\:$METHODNAME$($METHODPARMS$)\n{\n\n}\n\n// BEGIN CUT HERE \nint main()\n{\n    $CLASSNAME$ ___test; \n    ___test.run_test(-1); \n    return 0;\n} \n// END CUT HERE 
fileeditor.config.endCut=// END CUT HERE
fileeditor.config.javaextension=java
editor.1.entrypoint=codeprocessor.EntryPoint
fileeditor.config.fileName=problem
fileeditor.config.dirName=/home/jdutta/programming/topcoder
fileeditor.config.javatemplate=$BEGINCUT$\n$PROBLEMDESC$\n$ENDCUT$\nimport java.util.*;\npublic class $CLASSNAME$ {\n\tpublic $RC$ $METHODNAME$($METHODPARMS$) {\n\t\t\n\t}\n\tpublic static void main(String[] args) {\n\t\t$CLASSNAME$ temp \= new $CLASSNAME$();\n\t\tSystem.out.println(temp.$METHODNAME$($METHODPARMS$));\n\t}\n}
fileeditor.config.csharpextension=cs
fileeditor.config.probdescfilewrite=false
com.topcoder.jmaContestApplet.frames.codingframe.dividerloc=265
com.topcoder.jmaContestApplet.frames.codingframe.size=833\:592
fileeditor.config.beginCut=// BEGIN CUT HERE
fileeditor.config.probdescfileextnsion=txt
